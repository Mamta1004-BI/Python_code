import spacy
from spacy.training.example import Example
from spacy.util import minibatch, compounding
import random
import json

# Load your training data
with open("Input Data\\spacy_train_data_noisy.json", "r", encoding="utf-8") as f:
    TRAIN_DATA = json.load(f)

# Load a blank English model
nlp = spacy.blank("en")

# Create the NER component and add it to the pipeline if it's not already there
if "ner" not in nlp.pipe_names:
    ner = nlp.add_pipe("ner")
else:
    ner = nlp.get_pipe("ner")

# Add labels to the NER component
for _, annotations in TRAIN_DATA:
    for ent in annotations.get("entities"):
        ner.add_label(ent[2])

# Disable other pipeline components during training
other_pipes = [pipe for pipe in nlp.pipe_names if pipe != "ner"]

with nlp.disable_pipes(*other_pipes):
    optimizer = nlp.begin_training()
    for i in range(30):  # Number of training iterations
        random.shuffle(TRAIN_DATA)
        losses = {}
        batches = minibatch(TRAIN_DATA, size=compounding(4.0, 32.0, 1.001))
        for batch in batches:
            examples = []
            for text, annotations in batch:
                doc = nlp.make_doc(text)
                example = Example.from_dict(doc, annotations)
                examples.append(example)
            nlp.update(examples, drop=0.35, losses=losses)
        print(f"Iteration {i+1}, Losses: {losses}")

# Save the model to disk
nlp.to_disk("custom_ner_model")
print("âœ… Custom NER model saved to 'custom_ner_model'")
